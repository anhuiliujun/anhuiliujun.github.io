---
layout: post
title:  "https理解(二)"
date:   2016-11-27 14:25:52 +0800
categories: http
---
### 背景
*http*是一个端到端的应用层协议，他只保证从哪里到哪里，而至于中间传输的过程中会发生什么，并未提及。

那我们来看下中间传输的过程中可能发生的事情：

- 假的服务器（恶意代理充当虚假服务器，获取用户信息）
- 假的客户端（获取用户登录验证，然后充当客户端，向服务器获取或者提交数据）
- 数据（请求和响应）有可能被篡改
- 客户端与服务器的会话可能被窃听

所以一个安全的http，我们需要：

- 服务器认证（客户端知道它们是在与真正的而不是伪造的服务器通话）
- 客户端认证（服务器知道它们是在与真正的而不是伪造的客户端通话）
- 完整性（客户端和服务器的数据不会被修改）
- 加密（客户端和服务器的对话是私密的，无需担心被窃听）

### 数字加密的一些概念
- 密码：对文本进行编码，使偷窥者无法识别的**算法**
- 密钥：改变密码行为的数字化**参数**
- [对称密钥加密系统][symmetric-key-algorithm]：编/解码使用相同密钥的**算法**
- [不对称密钥加密系统][asymmetric-cryptography]：编/解码使用不同密钥的**算法**
- [公开密钥加密系统][public-key-cryptography]：一种能够使数百万计算机便捷的发送机密报文的系统
- 数字签名：用来验证报文未被伪造或篡改的校验和
- 数字证书：由一个可信组织验证和签发的识别信息

### tls
我在上一遍文章里粗略说明了，https为什么是安全的，但是并没有详细介绍其安全的原因。

*https*之所以安全，是因为它在将http流量发送给tcp之前，先使用tls做了一层加密。所以关键在于tls这层的加密过程。

tls又名传输层安全协议，是一种安全协议，目的是为互联网通信，提供**安全**及**数据完整性**保障。目前已成为互联网上保密通讯的工业标准。

tls包含两层：

- 记录层（确定了传输层数据的封装格式）
- 传输层
    - 使用[X.509][x-509]认证
    - 利用非对称加密演算来对通信方做身份认证
    - 交换对称密钥作为会谈密钥

传输层的这几个过程，通常称为ssl握手，下面是它的详细过程：

1. 客户端连接到支持TLS协议的服务器要求创建安全连接并列出了受支持的密码组合
2. 服务器从该列表中决定加密和散列函数，并通知客户端。
3. 服务器发回其数字证书，此证书通常包含服务器的名称、受信任的证书颁发机构（CA）和服务器的公钥。
4. 客户端确认其颁发的证书的有效性。
5. 为了生成会话密钥用于安全连接，客户端使用服务器的公钥加密随机生成的密钥，并将其发送到服务器，只有服务器才能使用自己的私钥解密。
6. 利用随机数，双方生成用于加密和解密的对称密钥。


上面的过程可以大致分为如下3个阶段：

1. 对等协商支持的密钥算法（1、2）
2. 基于非对称密钥的信息传输加密和身份认证、基于PKI证书的身份认证（3、4、5）
3. 基于对称密钥的数据传输保密（6）

第二阶段解决了**服务器与客户端身份的认证**问题，其中的第5步主要使用非对称密钥加密系统生成只有服务端才能用其私钥解开的密文，
其中存储了接下来数据传输过程中使用的对称密钥。

第三阶段就是使用第二阶段生成的对称密钥传输了，这保证了**数据不会被篡改**以及**会话不会被窃听**

可以看出基于tls的https很好的解决了我们上面所列出的http通信的安全问题。


[symmetric-key-algorithm]: https://zh.wikipedia.org/wiki/%E5%B0%8D%E7%A8%B1%E5%AF%86%E9%91%B0%E5%8A%A0%E5%AF%86
[public-key-cryptography]: https://zh.wikipedia.org/wiki/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86
[asymmetric-cryptography]: https://zh.wikipedia.org/wiki/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86
[x-509]: https://zh.wikipedia.org/wiki/X.509